@page "/settings"
@using EmployeeManagement.Blazor.Ui
@using EmployeeManagement.Blazor.Models
@using Microsoft.AspNetCore.Components.Forms
@using System.Net.Http.Json
@inject NavigationManager NavigationManager
@inject HttpClient Http

@code {

    [CascadingParameter]
    private Action<string> SetTitle { get; set; } = default!;
    protected override void OnInitialized()
        {
            // Cập nhật tiêu đề cho trang Statistics
            SetTitle?.Invoke("Settings");
        }
}

<h3>Application Preferences</h3>
<EditForm Model="@preferences" OnValidSubmit="SavePreferences">
    <div class="mb-3">
        <label>Theme:</label>
        <InputSelect @bind-Value="preferences.Theme">
            <option value="Light">Light</option>
            <option value="Dark">Dark</option>
            <option value="HighContrast">High Contrast</option>
            <option value="ColorBlind">Color Blind</option>
            <option value="Custom">Custom</option>
            <option value="System">System default</option>
        </InputSelect>
    </div>
    <div class="mb-3">
        <label>Language:</label>
        <InputSelect @bind-Value="preferences.Language">
            <option value="en">English</option>
            <option value="es">Spanish</option>
            <option value="fr">French</option>
            <option value="de">German</option>
            <option value="ja">Japanese</option>
            <option value="vn">Vietnamese</option>
            <option value="zh">Chinese</option>
        </InputSelect>
    </div>
    <button type="submit" class="btn btn-primary">Save Preferences</button>
</EditForm>

<hr />

<h3>Notifications</h3>
<EditForm Model="@preferences" OnValidSubmit="SavePreferences">
    <div class="mb-3">
        <label>Enable Notifications:</label>
        <InputCheckbox @bind-Value="preferences.EnableNotifications"/>
    </div>
    <div class="mb-3">
        <label>Notification Frequency:</label>
        <InputSelect @bind-Value="preferences.NotificationFrequency">
            <option value="Immediate">Immediate</option>
            <option value="Daily">Daily</option>
            <option value="Weekly">Weekly</option>
            <option value="Monthly">Monthly</option>
        </InputSelect>
    </div>
    <button type="submit" class="btn btn-primary">Save Notification Settings</button>
</EditForm>

<hr />

<h3>Export Settings</h3>
<EditForm Model="@preferences" OnValidSubmit="SavePreferences">
    <div class="mb-3">
        <label>Export Format:</label>
        <InputSelect @bind-Value="preferences.ExportFormat">
            <option value="CSV">CSV</option>
            <option value="Excel">Excel</option>
            <option value="PDF">PDF</option>
        </InputSelect>
    </div>
    <div class="mb-3">
        <label>Include Headers:</label>
        <InputCheckbox @bind-Value="preferences.IncludeHeaders" />
    </div>
    <button type="submit" class="btn btn-primary">Save Export Settings</button>
</EditForm>

<hr />

<h3>Account Settings</h3>
<EditForm Model="@account" OnValidSubmit="SaveAccount">
    <div class="mb-3">
        <label>Email:</label>
        <InputText @bind-Value="account.Email" class="form-control" placehodlder="自分のメールアドレスの入力"/>
    </div>
    <div class="mb-3">
        <label>Display Name:</label>
        <InputText @bind-Value="account.DisplayName" class="form-control" placehodlder="表示名の入力"/>
    </div>
    <div class="mb-3">
        <label>Change Password:</label>
        <InputText @bind-Value="account.NewPassword" type="password" class="form-control" placeholder="新しいパスワードを入力"/>
    </div>
    <button type="submit" class="btn btn-primary">Save Account Settings</button>
</EditForm>

<Alert @ref="alert" Title= "New Password" Message="Are you sure want to change the password?" OnConfirm="ConfirmSave" OnCancel="CancelSave" />

@code {
    private Preferences preferences = new Preferences();
    private AccountSettings account = new AccountSettings();
    private Alert alert = default!;

    private string errorMessage = string.Empty;

    private void SavePreferences()
    {
        // Save preferences logic here
        // Example: Save preferences to local storage or call an API
        // For demonstration, just display a message (replace with real logic)
        Console.WriteLine($"Preferences saved: Theme={preferences.Theme}, Language={preferences.Language}, Notifications={preferences.EnableNotifications}, Frequency={preferences.NotificationFrequency}, ExportFormat={preferences.ExportFormat}, IncludeHeaders={preferences.IncludeHeaders}");
    }

    private void SaveAccount()
    {
        // Save account settings logic here
        // Example: Validate input
        if (string.IsNullOrWhiteSpace(account.Email) || string.IsNullOrWhiteSpace(account.DisplayName))
        {
            // Show error message (implement your own notification logic)
            Console.WriteLine("Email and Display Name are required.");
            return;
        }
        alert.ShowAsync();
        // Clear the password field for security
        account.NewPassword = string.Empty;
    }

     private async Task ConfirmSave()
    {
        try
        {
            var response = await Http.PutAsJsonAsync($"api/auth/update", account);
            if (response.IsSuccessStatusCode)
            {
                return;
            }
            else
            {
                errorMessage = "Failed to update account.";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Error settings account: {ex.Message}";
        }
        Console.WriteLine("Account settings saved successfully.");
    }
    private void CancelSave()
    {
        // Xử lý hủy thêm nhân viên ở đây
        Console.WriteLine("Người dùng đã hủy thao tác thay đổi mật khẩu.");
    }
}