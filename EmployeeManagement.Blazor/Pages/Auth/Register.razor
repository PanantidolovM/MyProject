@page "/register"
@using EmployeeManagement.Blazor.Models
@using System.Net.Http.Json
@using System.Text.Json
@inject HttpClient Http
@inject NavigationManager Navigation
@inject IJSRuntime JS
@inject CustomAuthenticationStateProvider AuthStateProvider
@code {

    [CascadingParameter]
    private Action<string> SetTitle { get; set; } = default!;
    protected override void OnInitialized()
        {
            // Cập nhật tiêu đề cho trang Statistics
            SetTitle?.Invoke("Register");
        }
}

<h3>Đăng ký</h3>

@if (!string.IsNullOrEmpty(Error))
{
    <div class="alert alert-danger">@Error</div>
}

<EditForm Model="user" OnValidSubmit="HandleRegis">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="mb-3">
        <label for="username" class="form-label">Email</label>
        <InputText id="username" class="form-control" @bind-Value="user.Email" placeholder="メール入力" />
    </div>
    <div class="mb-3">
        <label for="password" class="form-label">Password</label>
        <InputText id="password" type="password" class="form-control" @bind-Value="user.Password" placeholder="パスポート入力"/>
    </div>
    <button type="submit" class="btn btn-primary">Register</button>
</EditForm>

@code {
    

    private UserRegister user = new();
    private string Error = string.Empty;
    
    private async Task HandleRegis()
    {
        Error = string.Empty;
        try{
            var response = await Http.PostAsJsonAsync("http://localhost:5048/api/auth/register", user);
            if (response.IsSuccessStatusCode)
            {
                // Reset form if successfully registed
                Navigation.NavigateTo("/login",forceLoad: true);
            }
        }
        catch (Exception ex)
        {
            // Exception
            Error = "Register failed. Please try again.";
            Console.Error.WriteLine(ex);
        }
    }
}
