@page "/login"
@using EmployeeManagement.Blazor.Models
@using System.Net.Http.Json
@using System.Text.Json
@inject HttpClient Http
@inject NavigationManager NavigationManager
@inject IJSRuntime JS
@inject CustomAuthenticationStateProvider AuthStateProvider

<h3>Login</h3>

@if (!string.IsNullOrEmpty(Error))
{
    <div class="alert alert-danger">@Error</div>
}

<EditForm Model="loginModel" OnValidSubmit="HandleLogin">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="mb-3">
        <label for="username" class="form-label">Email</label>
        <InputText id="username" class="form-control" @bind-Value="loginModel.Email" placeholder="メール入力" />
    </div>
    <div class="mb-3">
        <label for="password" class="form-label">Password</label>
        <InputText id="password" type="password" class="form-control" @bind-Value="loginModel.Password" placeholder="パスポート入力"/>
    </div>
    <button type="submit" class="btn btn-primary">Login</button>
    <button type="button" class="btn btn-secondary" @onclick="SignIn">Sign In</button>
</EditForm>

@code {
    private LoginModel loginModel = new();
    private string Error = string.Empty;
    private async Task HandleLogin()
    {
        Error = string.Empty;
        try
        {
            var response = await Http.PostAsJsonAsync("http://localhost:5048/api/auth/login", loginModel);
            if (response.IsSuccessStatusCode)
            {
                var result = await response.Content.ReadFromJsonAsync<LoginResult>();
                if (result?.Token is null || result.Expiration < DateTime.UtcNow)
                {
                    Error = "Login token has expired. Please login again.";
                    return;
                }
                // Log login information outto console (dùng dành cho debug)
                await JS.InvokeVoidAsync("console.log", $"Email: {loginModel.Email}, Password: {loginModel.Password}, Token: {result.Token}");
                // Save token into localStorage through JS Interop using for API.
                await JS.InvokeVoidAsync("localStorage.setItem", "jwtToken", result.Token);
                // Update Authorize status for all aplication
                await AuthStateProvider.NotifyUserAuthenticationAsync(result.Token);
                NavigationManager.NavigateTo("/admin",forceLoad: true);
            }
            else
            {
                Error = "Invalid username or password.";
            }
        }
        catch (Exception ex)
        {
            // Exception
            Error = "Login failed. Please try again.";
            Console.Error.WriteLine(ex);
        }
    }

    private void SignIn()
    {
        NavigationManager.NavigateTo("/register");
    }
}