@page "/employees"
@using System.Net.Http.Json
@using EmployeeManagement.Blazor.Models
@using EmployeeManagement.Blazor.Layout
@using EmployeeManagement.Blazor.Ui
@inject NavigationManager NavigationManager
@inject HttpClient Http
@code {

    [CascadingParameter]
    public Action<string> SetTitle { get; set; } = default!;
    protected override void OnInitialized()
        {
            // Cập nhật tiêu đề cho trang Employees
            SetTitle?.Invoke("Employees");
        }
}

@* <EmployeeManagement.Blazor.Layout.PageTitle>@currentPageTitle</EmployeeManagement.Blazor.Layout.PageTitle> *@
<div>
    <h3>Employee Management</h3>
    <p>Manage all employees in your organization. Add new employees, update information, or remove employees who have left the company.</p>
</div>

<hr>

<div class="mb-3">
    <a class="btn btn-primary" href="/add">Add New Employee</a>
    <a class="btn btn-secondary" href="/reports">View Reports</a>
</div>

@if (employeeDtos == null || employeeDtos.Count == 0)
{
    <p><em>No employees found </em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>ID</th>
                <th>Họ</th>
                <th>Tên</th>
                <th>Quốc tịch</th>
                <th>Hộ chiếu</th>
                <th>Chứng chỉ</th>
                <th>Số My Number</th>
                <th>Ghi chú</th>
                <th>Địa chỉ</th>
                <th>Điện thoại</th>
                <th>Email</th>
                <th>Lương</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var emp in employeeDtos)
            {
                <tr>
                    <td>@emp.Id</td>
                    <td>@emp.FirstName</td>
                    <td>@emp.LastName</td>
                    <td>@emp.KokuSeki</td>
                    <td>@emp.Passport</td>
                    <td>@emp.Shikaku</td>
                    <td>@emp.MyNumber</td>
                    <td>@emp.BiKou</td>
                    <td>@emp.JuuSho</td>
                    <td>@emp.Keitai</td>
                    <td>@emp.Mail</td>
                    <td>@emp.Salary</td>
                    @*<td>Created At: @emp.CreatedAt.ToString("yyyy/MM/dd HH:mm:ss")</td> *@
                    @*<td>Updated At: @emp.UpdatedAt.ToString("yyyy/MM/dd HH:mm:ss")</td> *@
                    <td>
                        <a href="/details/@emp.Id">🔍 employee details</a> @* 社員情報詳細 *@
                        <a href="/update/@emp.Id">✏️ Edit</a> @* 社員情報更新 *@
                        <button class="btn btn-danger btn-sm" @onclick="() => ConfirmDelete(emp.Id)">🗑 Delete</button> @* 社員情報削除 *@
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

<Alert @ref="alert" Title= "Add Employee" Message="Are you sure want to add this employee?" OnConfirm="ConfirmDel" OnCancel="CancelDel" />

@code {
    private List<DtoEmployee> employeeDtos = new List<DtoEmployee>();
    private Alert alert = default!;
    private int employeeIdToDelete;
    protected override async Task OnInitializedAsync()
    {
        try
        {
            // Gọi API từ nhánh backend để lấy danh sách nhân viên
            employeeDtos = await Http.GetFromJsonAsync<List<DtoEmployee>>("api/employees/getAll") ?? new List<DtoEmployee>();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error While calling Api: {ex.Message}");
        }
    }

    protected async Task ConfirmDelete(int id)
    {
        employeeIdToDelete = id;
        await alert.ShowAsync();
    }
    
    private void ConfirmDel()
    {
        NavigationManager.NavigateTo($"/delete/{employeeIdToDelete}");
    }
    private void CancelDel()
    {
        // Xử lý hủy thêm nhân viên ở đây
        Console.WriteLine("Người dùng đã hủy thao tác xóa nhân viên.");
    }
}
