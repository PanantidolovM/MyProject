@page "/login"
@using System.Net.Http.Json
@using System.Text.Json
@inject HttpClient Http
@inject NavigationManager Navigation
@inject IJSRuntime JS

<h3>Login</h3>

@if (!string.IsNullOrEmpty(ErrorMessage))
{
    <div class="alert alert-danger">@ErrorMessage</div>
}

<EditForm Model="loginModel" OnValidSubmit="HandleLogin">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="mb-3">
        <label for="username" class="form-label">Username</label>
        <InputText id="username" class="form-control" @bind-Value="loginModel.Email" placeholder="メール入力" />
    </div>
    <div class="mb-3">
        <label for="password" class="form-label">Password</label>
        <InputText id="password" type="password" class="form-control" @bind-Value="loginModel.Password" placeholder="パスポート入力"/>
    </div>
    <button type="submit" class="btn btn-primary">Login</button>
</EditForm>

@code {
    private LoginModel loginModel = new();
    private string ErrorMessage = string.Empty;


    private async Task HandleLogin()
    {
        ErrorMessage = string.Empty;
        try
        {
            var response = await Http.PostAsJsonAsync("http://localhost:5048/api/auth/login", loginModel);
            if (response.IsSuccessStatusCode)
            {
                var result = await response.Content.ReadFromJsonAsync<LoginResult>();
                if (result == null || string.IsNullOrEmpty(result.Token))
                {
                    ErrorMessage = "Login failed. Please try again.";
                    return;
                }
                else if (result.expiration < DateTime.UtcNow)
                {
                    ErrorMessage = "Login token has expired. Please log in again.";
                    return;
                }
                // Lưu token vào localStorage qua JS Interop để sử dụng cho các API sau này.
                await JS.InvokeVoidAsync("localStorage.setItem", "jwtToken", result.Token);
                // Sau khi đăng nhập thành công, chuyển hướng đến trang chính hoặc trang bảo mật.
                Navigation.NavigateTo("/admin");
            }
            else
            {
                ErrorMessage = "Invalid username or password.";
            }
        }
        catch (HttpRequestException httpEx)
        {
            ErrorMessage = "Unable to connect to server. Please try again later.";
            Console.Error.WriteLine($"HTTP error during login: {httpEx.Message}");
        }
        catch (JsonException jsonEx)
        {
            ErrorMessage = "Received invalid data from the server.";
            Console.Error.WriteLine($"JSON parse error: {jsonEx.Message}");
        }
        catch (Exception ex)
        {
            ErrorMessage = "An error occurred during login.";
            Console.Error.WriteLine($"Unexpected error during login: {ex.Message}");
        }
    }

    public class LoginModel
    {
        [System.ComponentModel.DataAnnotations.Required]
        public string Email { get; set; } = string.Empty;
        [System.ComponentModel.DataAnnotations.Required]
        public string Password { get; set; } = string.Empty;
    }

    public class LoginResult
    {
        public string Token { get; set; } = string.Empty;
        public DateTime expiration { get; set; }
    }
}